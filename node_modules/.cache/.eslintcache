[{"/home/Tiresia/React nanoDegree/my-reads/src/index.js":"1","/home/Tiresia/React nanoDegree/my-reads/src/App.js":"2","/home/Tiresia/React nanoDegree/my-reads/src/reportWebVitals.js":"3","/home/Tiresia/React nanoDegree/my-reads/src/Bookshelf.js":"4","/home/Tiresia/React nanoDegree/my-reads/src/Shelf.js":"5","/home/Tiresia/React nanoDegree/my-reads/src/Aux.js":"6","/home/Tiresia/React nanoDegree/my-reads/src/Header.js":"7","/home/Tiresia/React nanoDegree/my-reads/src/Search.js":"8","/home/Tiresia/React nanoDegree/my-reads/src/Book.js":"9","/home/Tiresia/React nanoDegree/my-reads/src/Button.js":"10","/home/Tiresia/React nanoDegree/my-reads/src/Library.js":"11","/home/Tiresia/React nanoDegree/my-reads/src/BooksAPI.js":"12"},{"size":590,"mtime":1632944787459,"results":"13","hashOfConfig":"14"},{"size":2472,"mtime":1633635352239,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1632768415746,"results":"16","hashOfConfig":"14"},{"size":1908,"mtime":1633639471517,"results":"17","hashOfConfig":"14"},{"size":790,"mtime":1633639238251,"results":"18","hashOfConfig":"14"},{"size":83,"mtime":1632769942694,"results":"19","hashOfConfig":"14"},{"size":332,"mtime":1632941213450,"results":"20","hashOfConfig":"14"},{"size":380,"mtime":1632952091663,"results":"21","hashOfConfig":"14"},{"size":1113,"mtime":1633981823501,"results":"22","hashOfConfig":"14"},{"size":980,"mtime":1632949259147,"results":"23","hashOfConfig":"14"},{"size":3305,"mtime":1633639116135,"results":"24","hashOfConfig":"14"},{"size":1086,"mtime":1632769063850,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1yl5oaf",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/Tiresia/React nanoDegree/my-reads/src/index.js",[],["57","58"],"/home/Tiresia/React nanoDegree/my-reads/src/App.js",["59","60","61","62","63"],"import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport BookShelf from \"./Bookshelf\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\nimport Button from \"./Button\";\nimport Library from \"./Library\";\nimport { Route } from \"react-router\";\nimport Aux from \"./Aux\";\nimport * as BooksAPI from \"./BooksAPI\";\n\nclass App extends Component {\n    state = {\n        books: [],\n        query: \"\",\n    };\n\n    componentDidMount() {\n        BooksAPI.getAll().then((books) =>\n            this.setState(() => ({\n                books,\n            }))\n        );\n    }\n\n    updateQuery = (query) => {\n        this.setState(() => ({\n            query: query.trim(),\n        }));\n    };\n\n    clearQuery = () => {\n        this.updateQuery(\"\");\n    };\n\n    shelfUpdate=(book, shelfName) =>{\n      const {books} = this.state;\n      const updateIndex = books.findIndex(b=> b.id === book.id)\n      const updateBook= books[updateIndex]\n      updateBook.shelf= shelfName\n\n     \n\n      BooksAPI.update(book, shelfName).then(()=>{\n          this.setState({\n              books: [...books.slice(0, updateIndex), updateBook , ...books.slice(updateIndex + 1)]\n  \n          })\n          \n      })\n  }\n    render() {\n        const { books, query } = this.state;\n\n        return (\n            <div className='App'>\n                <Route\n                    exact\n                    path='/store'\n                    render={() => (\n                        <Library\n                            books={this.state.books}\n                            query={this.state.query}\n                            onUpdateQuery={this.updateQuery}\n                            onShelfUpdate={this.shelfUpdate}\n\n                        />\n                    )}\n                />\n                <Route\n                    exact\n                    path='/'\n                    render={() => (\n                        <Aux>\n                            <BookShelf\n                                onUpdateQuery={this.updateQuery}\n                                query={this.state.query}\n                                books={this.state.books}\n                                onShelfUpdate={this.shelfUpdate}\n                                onClearQuery={this.clearQuery}\n\n\n\n                            />\n                        </Aux>\n                    )}\n                />\n\n                <Button />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","/home/Tiresia/React nanoDegree/my-reads/src/reportWebVitals.js",[],"/home/Tiresia/React nanoDegree/my-reads/src/Bookshelf.js",["64","65","66"],"import React, { Component } from \"react\";\nimport Aux from \"./Aux\";\nimport Shelf from \"./Shelf\";\nimport Styles from \"./css/main.module.css\";\nimport Book from \"./Book\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Search from \"./Search\";\n\nclass BookShelf extends Component {\n    componentDidMount() {\n        this.props.onClearQuery();\n    }\n\n    handleChange = () => {};\n    render() {\n        const { query, onUpdateQuery, books, onShelfUpdate, onClearQuery } =\n            this.props;\n        const showingBooks =\n            query === \"\"\n                ? books\n                : books.filter((b) =>\n                      b.title.toLowerCase().includes(query.toLowerCase())\n                  );\n\n        const shelves = [\n            {\n                name: \"Read\",\n                books: showingBooks.filter((b) => b.shelf === \"read\"),\n            },\n            {\n                name: \"Current Reading\",\n                books: showingBooks.filter(\n                    (b) => b.shelf === \"currentlyReading\"\n                ),\n            },\n            {\n                name: \"Want To Read\",\n                books: showingBooks.filter((b) => b.shelf === \"wantToRead\"),\n            },\n        ];\n\n        return (\n            <Aux>\n                {console.log(books)}\n                <Search onUpdateQuery={onUpdateQuery} />\n\n                <ul className={Styles.bookShelf}>\n                    {shelves &&\n                        shelves.map((s) => (\n                            <Shelf\n                                key={s.name}\n                                title={s.name}\n                                books={s.books}\n                                onShelfUpdate={onShelfUpdate}\n                                handleChange={this.handleChange}\n                            />\n                        ))}\n                </ul>\n            </Aux>\n        );\n    }\n}\n\nexport default BookShelf;\n","/home/Tiresia/React nanoDegree/my-reads/src/Shelf.js",[],"/home/Tiresia/React nanoDegree/my-reads/src/Aux.js",["67"],"import React from 'react'\n\nconst Aux = (props)=>props.children;\n\nexport default Aux","/home/Tiresia/React nanoDegree/my-reads/src/Header.js",["68"],"import React from \"react\";\nimport Aux from \"./Aux\";\nimport styles from './css/main.module.css';\nimport Search from './Search';\n\n\nconst Header=(props)=>{\n\n\n    return( \n        <Aux>\n            <header >\n                \n                <Search/>\n               \n            </header>\n        </Aux>\n\n    )\n}\n\nexport default Header;","/home/Tiresia/React nanoDegree/my-reads/src/Search.js",["69"],"import react from \"react\";\nimport Styles from \"./css/main.module.css\";\n\nconst Search = (props) => {\n    let { onUpdateQuery } = props;\n\n    return (\n        <input\n            className={Styles.searchBook}\n            type='text'\n            placeholder='search books'\n            onChange={(event) => onUpdateQuery(event.target.value)}></input>\n    );\n};\n\nexport default Search;\n","/home/Tiresia/React nanoDegree/my-reads/src/Book.js",["70","71","72"],"/home/Tiresia/React nanoDegree/my-reads/src/Button.js",[],"/home/Tiresia/React nanoDegree/my-reads/src/Library.js",["73","74","75","76"],"import React, { Component } from \"react\";\nimport Styles from \"./css/main.module.css\";\nimport Aux from \"./Aux\";\nimport Search from \"./Search\";\nimport Book from \"./Book\";\nimport Button from \"./Button\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { render } from \"@testing-library/react\";\n\nclass Library extends Component {\n    state = {\n        shelfChange: false,\n        flag: true,\n        \n        query: \"\",\n    };\n\n    updateQuery = (query) => {\n        this.setState(() => ({\n            query: query.trim(),\n        }));\n    };\n\n    clearQuery = () => {\n        this.updateQuery(\"\");\n    };\n\n    /*showMessageHandler = (prevState) => {\n        this.setState((prevState) => ({\n            shelfChange: !prevState.shelfChange,\n        }));\n        setTimeout(() => {\n            this.setState((currentState) => ({\n                flag: !currentState.flag,\n            }));\n        }, 1500);\n    };*/\n\n    checkShelf = (currentShelf, nextShelf) => {\n        currentShelf === nextShelf\n            ? this.setState(() => ({\n                  flag: false\n              })) && setTimeout(() => {\n                this.setState((currentState) => ({\n                    flag: true,\n                }));\n            }, 1500)\n            : this.setState(() => ({\n                 flag:true\n              }));\n        \n        this.setState((prevState) => ({\n            shelfChange: true\n        }));\n        setTimeout(() => {\n            this.setState((currentState) => ({\n                shelfChange: false,\n            }));\n        }, 1500);\n\n        console.log(currentShelf)\n        console.log(nextShelf)\n    };\n\n    render() {\n        const { books, onShelfUpdate, onUpdateQuery } = this.props;\n        console.log(books);\n        const {  query, flag, shelfChange } = this.state;\n\n        const showingBooks =\n            query === \"\"\n                ? books\n                : books.filter((b) =>\n                      b.title.toLowerCase().includes(query.toLowerCase())\n                  );\n\n        const showMessage = !flag ? (\n            <div className={Styles.showErrorMessage}>\n                <p> the book is already in the selected shelf </p>\n            </div>\n        ) : (\n            <div className={Styles.showMessage}>\n                <p> the books has been succesfully moved </p>\n            </div>\n        );\n\n        return (\n            <Aux>\n                <div className={Styles.Library}>\n                    <Search onUpdateQuery={this.updateQuery} />\n                    {shelfChange && showMessage}\n\n                    {console.log(shelfChange)}\n\n                    <h1 style={{ textAlign: \"center\" }}>Book Store</h1>\n                    <div className={Styles.bookStore}>\n                        {showingBooks.map((b) => (\n                            <li key={b.key}>\n                                <Book\n                                    onShelfUpdate={onShelfUpdate}\n                                    cover={`url(${b.imageLinks.thumbnail})`}\n                                    book={b}\n                                    handleChange={this.checkShelf}\n                                />\n                            </li>\n                        ))}\n                    </div>\n                </div>\n            </Aux>\n        );\n    }\n}\n\nexport default Library;\n","/home/Tiresia/React nanoDegree/my-reads/src/BooksAPI.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":12},{"ruleId":"81","severity":1,"message":"85","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":14},{"ruleId":"81","severity":1,"message":"86","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":14},{"ruleId":"81","severity":1,"message":"87","line":54,"column":17,"nodeType":"83","messageId":"84","endLine":54,"endColumn":22},{"ruleId":"81","severity":1,"message":"88","line":54,"column":24,"nodeType":"83","messageId":"84","endLine":54,"endColumn":29},{"ruleId":"81","severity":1,"message":"89","line":5,"column":8,"nodeType":"83","messageId":"84","endLine":5,"endColumn":12},{"ruleId":"81","severity":1,"message":"90","line":6,"column":13,"nodeType":"83","messageId":"84","endLine":6,"endColumn":21},{"ruleId":"81","severity":1,"message":"91","line":16,"column":61,"nodeType":"83","messageId":"84","endLine":16,"endColumn":73},{"ruleId":"81","severity":1,"message":"92","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":13},{"ruleId":"81","severity":1,"message":"93","line":3,"column":8,"nodeType":"83","messageId":"84","endLine":3,"endColumn":14},{"ruleId":"81","severity":1,"message":"94","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":13},{"ruleId":"81","severity":1,"message":"95","line":3,"column":8,"nodeType":"83","messageId":"84","endLine":3,"endColumn":11},{"ruleId":"81","severity":1,"message":"96","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":26},{"ruleId":"81","severity":1,"message":"97","line":7,"column":35,"nodeType":"83","messageId":"84","endLine":7,"endColumn":37},{"ruleId":"81","severity":1,"message":"98","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":14},{"ruleId":"81","severity":1,"message":"90","line":7,"column":13,"nodeType":"83","messageId":"84","endLine":7,"endColumn":21},{"ruleId":"81","severity":1,"message":"99","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":16},{"ruleId":"81","severity":1,"message":"100","line":66,"column":39,"nodeType":"83","messageId":"84","endLine":66,"endColumn":52},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","'Search' is defined but never used.","'books' is assigned a value but never used.","'query' is assigned a value but never used.","'Book' is defined but never used.","'BooksAPI' is defined but never used.","'onClearQuery' is assigned a value but never used.","'React' is defined but never used.","'styles' is defined but never used.","'react' is defined but never used.","'Aux' is defined but never used.","'ContactsOutlined' is defined but never used.","'id' is assigned a value but never used.","'Button' is defined but never used.","'render' is defined but never used.","'onUpdateQuery' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]